/* 
 * 运营商业务API接口
 *
 * 运营商业务API接口平台应用程序接口文档
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: henryxm@163.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CodeRequest
    /// </summary>
    [DataContract]
    public partial class CodeRequest :  IEquatable<CodeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CodeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeRequest" /> class.
        /// </summary>
        /// <param name="appName">appName.</param>
        /// <param name="appPackage">appPackage.</param>
        /// <param name="channel">channel (required).</param>
        /// <param name="ip">ip.</param>
        /// <param name="mobile">mobile (required).</param>
        /// <param name="param">param.</param>
        /// <param name="product">product (required).</param>
        /// <param name="ua">ua.</param>
        public CodeRequest(string appName = default(string), string appPackage = default(string), string channel = default(string), string ip = default(string), string mobile = default(string), string param = default(string), string product = default(string), string ua = default(string))
        {
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new InvalidDataException("channel is a required property for CodeRequest and cannot be null");
            }
            else
            {
                this.Channel = channel;
            }
            
            // to ensure "mobile" is required (not null)
            if (mobile == null)
            {
                throw new InvalidDataException("mobile is a required property for CodeRequest and cannot be null");
            }
            else
            {
                this.Mobile = mobile;
            }
            
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for CodeRequest and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            
            this.AppName = appName;
            this.AppPackage = appPackage;
            this.Ip = ip;
            this.Param = param;
            this.Ua = ua;
        }
        
        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [DataMember(Name="appName", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or Sets AppPackage
        /// </summary>
        [DataMember(Name="appPackage", EmitDefaultValue=false)]
        public string AppPackage { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=true)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets Mobile
        /// </summary>
        [DataMember(Name="mobile", EmitDefaultValue=true)]
        public string Mobile { get; set; }

        /// <summary>
        /// Gets or Sets Param
        /// </summary>
        [DataMember(Name="param", EmitDefaultValue=false)]
        public string Param { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=true)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets Ua
        /// </summary>
        [DataMember(Name="ua", EmitDefaultValue=false)]
        public string Ua { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodeRequest {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppPackage: ").Append(AppPackage).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Ua: ").Append(Ua).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeRequest);
        }

        /// <summary>
        /// Returns true if CodeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppPackage == input.AppPackage ||
                    (this.AppPackage != null &&
                    this.AppPackage.Equals(input.AppPackage))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.Param == input.Param ||
                    (this.Param != null &&
                    this.Param.Equals(input.Param))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Ua == input.Ua ||
                    (this.Ua != null &&
                    this.Ua.Equals(input.Ua))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppPackage != null)
                    hashCode = hashCode * 59 + this.AppPackage.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Mobile != null)
                    hashCode = hashCode * 59 + this.Mobile.GetHashCode();
                if (this.Param != null)
                    hashCode = hashCode * 59 + this.Param.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Ua != null)
                    hashCode = hashCode * 59 + this.Ua.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
