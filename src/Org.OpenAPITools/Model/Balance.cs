/* 
 * 运营商业务API接口
 *
 * 运营商业务API接口平台应用程序接口文档
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: henryxm@163.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Balance
    /// </summary>
    [DataContract]
    public partial class Balance :  IEquatable<Balance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        /// <param name="balance">balance.</param>
        /// <param name="reward">reward.</param>
        /// <param name="total">total.</param>
        /// <param name="userUuid">userUuid.</param>
        /// <param name="voucher">voucher.</param>
        public Balance(decimal balance = default(decimal), decimal reward = default(decimal), decimal total = default(decimal), string userUuid = default(string), decimal voucher = default(decimal))
        {
            this._Balance = balance;
            this.Reward = reward;
            this.Total = total;
            this.UserUuid = userUuid;
            this.Voucher = voucher;
        }
        
        /// <summary>
        /// Gets or Sets _Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public decimal _Balance { get; set; }

        /// <summary>
        /// Gets or Sets Reward
        /// </summary>
        [DataMember(Name="reward", EmitDefaultValue=false)]
        public decimal Reward { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Gets or Sets UserUuid
        /// </summary>
        [DataMember(Name="userUuid", EmitDefaultValue=false)]
        public string UserUuid { get; set; }

        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name="voucher", EmitDefaultValue=false)]
        public decimal Voucher { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  _Balance: ").Append(_Balance).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  UserUuid: ").Append(UserUuid).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Balance);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="input">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Balance == input._Balance ||
                    (this._Balance != null &&
                    this._Balance.Equals(input._Balance))
                ) && 
                (
                    this.Reward == input.Reward ||
                    (this.Reward != null &&
                    this.Reward.Equals(input.Reward))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.UserUuid == input.UserUuid ||
                    (this.UserUuid != null &&
                    this.UserUuid.Equals(input.UserUuid))
                ) && 
                (
                    this.Voucher == input.Voucher ||
                    (this.Voucher != null &&
                    this.Voucher.Equals(input.Voucher))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Balance != null)
                    hashCode = hashCode * 59 + this._Balance.GetHashCode();
                if (this.Reward != null)
                    hashCode = hashCode * 59 + this.Reward.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.UserUuid != null)
                    hashCode = hashCode * 59 + this.UserUuid.GetHashCode();
                if (this.Voucher != null)
                    hashCode = hashCode * 59 + this.Voucher.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
